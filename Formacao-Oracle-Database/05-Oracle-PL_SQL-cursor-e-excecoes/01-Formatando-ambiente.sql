-- Altera a sessão para permitir a execução de scripts do Oracle
ALTER SESSION SET "_ORACLE_SCRIPT" = true;

-- Cria um novo usuário no Oracle
CREATE USER cursoplsql2 IDENTIFIED BY cursoplsql2 DEFAULT TABLESPACE USERS;

-- Concede permissões ao novo usuário
GRANT connect, resource TO cursoplsql2;

-- Define cotas ilimitadas para o usuário no tablespace USERS
ALTER USER cursoplsql2 QUOTA UNLIMITED ON USERS;

-- Criação das tabelas
CREATE TABLE SEGMERCADO
(
    ID NUMBER(5),
    DESCRICAO VARCHAR2(100)
);

CREATE TABLE CLIENTE
(
    ID NUMBER(5),
    RAZAO_SOCIAL VARCHAR2(100),
    CNPJ VARCHAR2(20),
    SEGMERCADO_ID NUMBER(5),
    DATA_INCLUSAO DATE,
    FATURAMENTO_PREVISTO NUMBER(10,2),
    CATEGORIA VARCHAR2(20)
);

-- Adição de constraints e chaves primárias/estrangeiras às tabelas
ALTER TABLE SEGMERCADO ADD CONSTRAINT SEGMERCACO_ID_PK PRIMARY KEY (ID);

ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_ID_PK PRIMARY KEY (ID);

ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_SEGMERCADO_ID FOREIGN KEY (SEGMERCADO_ID) REFERENCES SEGMERCADO (ID);

CREATE TABLE PRODUTO_EXERCICIO
(
    COD VARCHAR2(5),
    DESCRICAO VARCHAR2(100),
    CATEGORIA VARCHAR2(100)
);

CREATE TABLE PRODUTO_VENDA_EXERCICIO
(
    ID NUMBER(5),
    COD_PRODUTO VARCHAR2(5),
    DATA DATE,
    QUANTIDADE FLOAT,
    PRECO FLOAT,
    VALOR_TOTAL FLOAT,
    PERCENTUAL_IMPOSTO FLOAT
);

ALTER TABLE PRODUTO_EXERCICIO ADD CONSTRAINT PRODUTO_EXERCICIO_COD_PK PRIMARY KEY (COD);

ALTER TABLE PRODUTO_VENDA_EXERCICIO ADD CONSTRAINT PRODUTO_VENDA_EXERCICIO_ID_PK PRIMARY KEY (ID);

ALTER TABLE PRODUTO_VENDA_EXERCICIO ADD CONSTRAINT PRODUTO_VENDA_EXERCICIO_PRODUTO_EXERCICIO_COD FOREIGN KEY (COD_PRODUTO) REFERENCES PRODUTO_EXERCICIO (COD);

-- Inserção de dados nas tabelas
INSERT INTO SEGMERCADO (ID, DESCRICAO) VALUES ('3', 'ATACADISTA');
INSERT INTO SEGMERCADO (ID, DESCRICAO) VALUES ('1', 'VAREJISTA');
INSERT INTO SEGMERCADO (ID, DESCRICAO) VALUES ('2', 'INDUSTRIAL');
INSERT INTO SEGMERCADO (ID, DESCRICAO) VALUES ('4', 'FARMACEUTICOS');

INSERT INTO CLIENTE (ID, RAZAO_SOCIAL, CNPJ, SEGMERCADO_ID, DATA_INCLUSAO, FATURAMENTO_PREVISTO, CATEGORIA) VALUES ('3', 'SUPERMERCADO CARIOCA', '22222222222', '1', TO_DATE('13/06/22', 'DD/MM/RR'), '30000', 'MÉDIO');
INSERT INTO CLIENTE (ID, RAZAO_SOCIAL, CNPJ, SEGMERCADO_ID, DATA_INCLUSAO, FATURAMENTO_PREVISTO, CATEGORIA) VALUES ('1', 'SUPERMERCADOS CAMPEAO', '1234567890', '1', TO_DATE('12/06/22', 'DD/MM/RR'), '90000', 'MEDIO GRANDE');
INSERT INTO CLIENTE (ID, RAZAO_SOCIAL, CNPJ, SEGMERCADO_ID, DATA_INCLUSAO, FATURAMENTO_PREVISTO, CATEGORIA) VALUES ('2', 'SUPERMERCADO DO VALE', '11111111111', '1', TO_DATE('13/06/22', 'DD/MM/RR'), '90000', 'MÉDIO GRANDE');

INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES ('41232', 'Sabor de Verão > Laranja > 1 Litro', 'Sucos de Frutas');
INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES ('32223', 'Sabor de Verão > Uva > 1 Litro', 'Sucos de Frutas');
INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES ('67120', 'Frescor da Montanha > Aroma Limão > 1 Litro', 'Águas');
INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES ('92347', 'Aroma do Campo > Mate > 1 Litro', 'Mate');
INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES ('33854', 'Frescor da Montanha > Aroma Laranja > 1 Litro', 'Águas');

INSERT INTO PRODUTO_VENDA_EXERCICIO (ID, COD_PRODUTO, DATA, QUANTIDADE, PRECO, VALOR_TOTAL, PERCENTUAL_IMPOSTO) VALUES ('1', '41232', TO_DATE('01/01/22', 'DD/MM/RR'), '100', '10', '1000', '100');
INSERT INTO PRODUTO_VENDA_EXERCICIO (ID, COD_PRODUTO, DATA, QUANTIDADE, PRECO, VALOR_TOTAL, PERCENTUAL_IMPOSTO) VALUES ('2', '92347', TO_DATE('01/01/22', 'DD/MM/RR'), '200', '25', '5000', '15');

-- Criação das funções e procedimentos
CREATE OR REPLACE FUNCTION categoria_cliente
(p_FATURAMENTO IN CLIENTE.FATURAMENTO_PREVISTO%type)
RETURN CLIENTE.CATEGORIA%type
IS
   v_CATEGORIA CLIENTE.CATEGORIA%type;
BEGIN
   IF p_FATURAMENTO <= 10000 THEN
      v_CATEGORIA := 'PEQUENO';
   ELSIF p_FATURAMENTO <= 50000 THEN
      v_CATEGORIA := 'MÉDIO';
   ELSIF p_FATURAMENTO <= 100000 THEN
      v_CATEGORIA := 'MÉDIO GRANDE';
   ELSE
      v_CATEGORIA := 'GRANDE';
   END IF;
   RETURN v_CATEGORIA;
END;

CREATE OR REPLACE FUNCTION obter_descricao_segmercado
(p_ID IN SEGMERCADO.ID%type)
RETURN SEGMERCADO.DESCRICAO%type
IS
   v_DESCRICAO SEGMERCADO.DESCRICAO%type;
BEGIN
   SELECT DESCRICAO INTO v_DESCRICAO FROM SEGMERCADO WHERE ID = p_ID;
   RETURN v_DESCRICAO;
END;

CREATE OR REPLACE FUNCTION RETORNA_CATEGORIA
(p_COD IN produto_exercicio.cod%type)
RETURN produto_exercicio.categoria%type
IS
   v_CATEGORIA produto_exercicio.categoria%type;
BEGIN
   SELECT CATEGORIA INTO v_CATEGORIA FROM PRODUTO_EXERCICIO WHERE COD = p_COD;
   RETURN v_CATEGORIA;
END;

CREATE OR REPLACE FUNCTION RETORNA_IMPOSTO 
(p_COD_PRODUTO produto_venda_exercicio.cod_produto%type)
RETURN produto_venda_exercicio.percentual_imposto%type
IS
   v_CATEGORIA produto_exercicio.categoria%type;
   v_IMPOSTO produto_venda_exercicio.percentual_imposto%type;
BEGIN
   v_CATEGORIA := retorna_categoria(p_COD_PRODUTO);
   IF TRIM(v_CATEGORIA) = 'Sucos de Frutas' THEN
      v_IMPOSTO := 10;
   ELSIF TRIM(v_CATEGORIA) = 'Águas' THEN
      v_IMPOSTO := 20;
   ELSIF TRIM(v_CATEGORIA) = 'Mate' THEN
      v_IMPOSTO := 15;
   END IF;
   RETURN v_IMPOSTO;
END;

CREATE OR REPLACE PROCEDURE ALTERANDO_CATEGORIA_PRODUTO 
(p_COD produto_exercicio.cod%type, p_CATEGORIA produto_exercicio.categoria%type)
IS
BEGIN
   UPDATE PRODUTO_EXERCICIO SET CATEGORIA = p_CATEGORIA WHERE COD = P_COD;
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE EXCLUINDO_PRODUTO 
(p_COD produto_exercicio.cod%type)
IS
BEGIN
   DELETE FROM PRODUTO_EXERCICIO WHERE COD = P_COD;
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE INCLUINDO_DADOS_VENDA 
(
p_ID produto_venda_exercicio.id%type,
p_COD_PRODUTO produto_venda_exercicio.cod_produto%type,
p_DATA produto_venda_exercicio.data%type,
p_QUANTIDADE produto_venda_exercicio.quantidade%type,
p_PRECO produto_venda_exercicio.preco%type
)
IS
   v_VALOR produto_venda_exercicio.valor_total%type;
   v_PERCENTUAL produto_venda_exercicio.percentual_imposto%type;
BEGIN
   v_PERCENTUAL := retorna_imposto(p_COD_PRODUTO);
   v_VALOR := p_QUANTIDADE * p_PRECO;
   INSERT INTO PRODUTO_VENDA_EXERCICIO 
   (id, cod_produto, data, quantidade, preco, valor_total, percentual_imposto) 
   VALUES 
   (p_ID, p_COD_PRODUTO, p_DATA, p_QUANTIDADE, p_PRECO, v_VALOR, v_PERCENTUAL);
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE INCLUINDO_PRODUTO 
(p_COD produto_exercicio.cod%type, p_DESCRICAO produto_exercicio.descricao%type, p_CATEGORIA produto_exercicio.categoria%type)
IS
BEGIN
   INSERT INTO PRODUTO_EXERCICIO (COD, DESCRICAO, CATEGORIA) VALUES (p_COD, REPLACE(p_DESCRICAO, '-', '>'), p_CATEGORIA);
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE incluir_cliente
(
p_ID CLIENTE.ID%type,
p_RAZAO CLIENTE.RAZAO_SOCIAL%type,
p_CNPJ CLIENTE.CNPJ%type,
p_SEGMERCADO CLIENTE.SEGMERCADO_ID%type,
p_FATURAMENTO CLIENTE.FATURAMENTO_PREVISTO%type
)
IS
v_CATEGORIA CLIENTE.CATEGORIA%type;
BEGIN
   v_CATEGORIA := categoria_cliente(p_FATURAMENTO);

   INSERT INTO CLIENTE
   VALUES 
   (p_ID, p_RAZAO, p_CNPJ, p_SEGMERCADO, SYSDATE, p_FATURAMENTO, v_CATEGORIA);
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE incluir_segmercado
(p_ID IN SEGMERCADO.ID%type, p_DESCRICAO IN SEGMERCADO.DESCRICAO%type)
IS
BEGIN
   INSERT INTO SEGMERCADO (ID, DESCRICAO) VALUES (p_ID, UPPER(p_DESCRICAO));
   COMMIT;
END;

-- Formatação do CNPJ do cliente
SELECT SUBSTR(CNPJ, 1, 3) || '/' || SUBSTR(CNPJ, 4, 2) || '-' || SUBSTR(CNPJ, 6) AS CNPJ_FORMATADO FROM CLIENTE;
